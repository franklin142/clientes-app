//--------------------------------------------------------------------------------------------------
//                  CONFIGURACIONES PARA DESPLEGAR PROYECTO BACKEND-FRONTEND                      //
///////////////////////////////////////////////////////////////////////////////////////////////////
Si se esta trabajando en un editor como netbeans o eclipse que permiten establecer estas variables es 
buena idea hacer la configuracion ya que nos ahorraremos de estarlo haciendo cada vez que encendamos la maquina
para desarrollar.
si trabaja en eclipse hacer clic secundario para entrar al menu propiedades, luego run/debug settings 
y seleccionar la de springboot que tenga el nombre del poyecto y dar clic en la opcion edit... luego moverse a la 
pesta침a environment y escribir ahi las configuraciones de Produccion o Desarrollo



Configurar las variables de entorno con las credenciales de la base de datos y su direccion
// Desarrollo
export DEV_MYSQL_DB_HOST=jdbc:mysql://remotemysql.com
export DEV_MYSQL_DB_DATABASE=ymTAdfD6lq
export DEV_MYSQL_DB_PORT=3306
export DEV_MYSQL_DB_USERNAME=ymTAdfD6lq
export DEV_MYSQL_DB_PASSWORD=
export SPRING_PROFILES_ACTIVE=dev

// Produccion
export PROD_MYSQL_DB_HOST=jdbc:mysql://remotemysql.com
export PROD_MYSQL_DB_DATABASE=ymTAdfD6lq
export PROD_MYSQL_DB_PORT=3306
export PROD_MYSQL_DB_USERNAME=ymTAdfD6lq
export PROD_MYSQL_DB_PASSWORD=
export SPRING_PROFILES_ACTIVE=prod

NOTA: se recomienda generar un archivo y almacenarlo localmente donde se 
va a desplegar y que este se ejecute al iniciar el sistema operativo antes de arrancar 
el servidor

Es importante modificar el pow.xml si el servidor de produccion y desarrollo utilizan versiones de
mysql diferentes. si spring gestiona la version de mysql va a depender de la version de spring la version
que se maneje del driver. sinembargo podemos cambiar la configuracion descomentando la linea  
<!--version>5.1.25</version--> y establecer la version del driver mysql que tengamos instalado.
<dependency>
  <groupId>mysql</groupId>
  <artifactId>mysql-connector-java</artifactId>
  <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <!--version>5.1.25</version-->
  <scope>runtime</scope>
</dependency>



Si se llegan a eliminar los archivos mvnw, mvnw.cmd y .mvn .... Se tendra que crear un proyecto nuevo 
solo para copiar estos archivos los cuales son necesarios para la configuracion de maven.


para generar el jar desplegable en produccion se necesita ejecutar el comando

./mvnw clean package en linux/mac

                O

./mvnw.cmd clean package en windows

Luego para desplegar en una maquina local necesitamos tener unicamente JAVA instalado en la maquina
//////////////////////////////////////////////////////
//             MAQUINA LOCAL CON JAVA 8             //
/////////////////////////////////////////////////////
java -jar /ruta_donde_del_archivo.jar

/////////////////////////////////////////////////////
//                      HEROKU                    //
////////////////////////////////////////////////////
1 Si se va a desplegar en heroku vamos a necesitar configurar nuestro proyecto con java 8
ya que es la version de java que mueve la plataforma

2 Configurar el puerto server.port= ${PORT:8080} del archivo application.properties

Paso 1 crear una cuenta si no exite con leguaje JAVA y 
asi evitar hacer ajustes extras al desplegar


Paso 2 crear un proyecto nuevo en HEROKU

Paso 3 selcccionar la pesta침a deploy y marcar la opcion HEROKU 
y luego descargar la HEROKU CLI actualizada si no la tenemos instalada

curl https://cli-assets.heroku.com/install-ubuntu.sh | sh

Nota:Si esta utilizando una cuenta creada con otro lenguaje agregar el buildpack de java
yendo a settings del proyecto y seleccionar add buildpack. Seleccione java y de aceptar y tambien agregar heroku/jvm.

Paso 4 agregar el plugin de JawsDB MySQL en la pesta침a resources para poder trabajar con base de datos, 
esta opcion requiere anclar tarjeta de debito

Paso 5 ir a la ruta del proyecto y escribir heroku login

Paso 6 inicializar un proyecto git sino se ha hecho con git init
Paso 7 inicializar el git de heroku con heroku git:remote -a spring-boot2-heroku-frank
Paso 8 agregar plugin de heroku java con heroku plugins:install java
Paso 8 agregar addon de mysql con heroku addons:create jawsdb
Paso 9 obtener los datos generados en la constante JAWSDB_URL con heroku config:get JAWSDB_URL
Al obtenerlo por la terminal debemos copiarlo y llevarlo a las configuraciones del application.properties

Las configuraciones del application.properties quedarian asi: 

#Configuracion para heroku produccion, si no va a desplegar debe comentar estas configuraciones
spring.datasource.url=jdbc:mysql://wcwimj6zu5aaddlj.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/kpocg0vz6pqlkdha?useSSL=false
spring.datasource.username=xckhwyv3uxxcz90i
spring.datasource.password=qdok3txzft7azgko
server.port = ${PORT:8080}
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL57Dialect
#Fin configuracion heroku produccion

spring.jackson.time-zone=America/El_Salvador
spring.jackson.locale=es_ES
spring.servlet.multipart.max-file-size=128MB
spring.servlet.multipart.max-request-size=128MB
logging.level.org.hibernate.SQL=debug

Paso 10 Desplegar finalmente en heroku con heroku jar:deploy ./target/spring-boot-backend-apirest-0.0.1-SNAPSHOT.jar
Puede ver el url del proyecto generado luego de haber subido el proyecto desde la misma consola si desea probarlo

//////////////////////////////////////////////////////
//                APACHE2 linux                     //
/////////////////////////////////////////////////////

Para desplegar la app angular en apache se necesita ver mas en https://angular.io/guide/deployment

en la carpeta dist generada con el comando ng build --prod agregar el archivo .htaccess
con el siguiente contenido
# REQUEST_FILENAME sirve para poder ejecutar un refresh sin generar un 404

RewriteEngine On
# If an existing asset or directory is requested go to it as it is
RewriteCond %{REQUEST_FILENAME} -f [OR]
RewriteCond %{REQUEST_FILENAME} -d
RewriteRule ^ - [L]

# If the requested resource doesn't exist, use index.html
RewriteRule ^ /clientes-app/index.html

Luego ir a index.html de esta misma carpeta generada por el comando ng build --prod
y cambiamos el contenido de la eiqueta <base href="/"> por <base href="/clientes-app/">

Pasos para instalar apache httpd con apt-get
sudo apt-get install apache2

configurar el puerto para que no choque con los dem치s servidores activos

copiar el modulo de reescritura para poder reescribir rutas al navegar en la pagina SPA
cp /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/

dentro del archivo de apache2.conf Cambiar AllowOverride 
<Directory /var/www/>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
</Directory>

por ultimo copiar los archivos del dist dentro del servidor apache2

//////////////////////////////////////////////////////
//                NODEJS EXPRESS linux              //
/////////////////////////////////////////////////////
moverse a la carpeta dist
cd dist

ejecutar npm init
 unicamente cambiar el entry point a server.js
instalar express en la raiz de dist 
npm i express --save

cambiar el name del package.json a clientes-app
{
  "name": "clientes-app",
  "version": "1.0.0",
  "description": "",
  "main": "server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}

crear el archivo server.js
con el siguiente contenido

  let express = require('express');
  let path = require('path');
  let app = express();
  let port = 81;

  app.use(express.static('clientes-app'));
  app.get('*',(req,res,next)=>{
      res.sendFile(path.resolve('clientes-app/index.html'))
  });
  app.listen(port,()=>{
      console.log('escuchando en el puerto '+port)
  });